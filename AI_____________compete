### 구간 추출 메인 
## flag 변수 처리
df.loc[ df['Flag_AtoB'] > 0.9, 'Flag_AtoB'] = 1
df.loc[ df['Flag_AtoB'] <= 0.9, 'Flag_AtoB'] = 0

df.loc[ df['Flag_AtoC'] > 0.9, 'Flag_AtoC'] = 1
df.loc[ df['Flag_AtoC'] <= 0.9, 'Flag_AtoC'] = 0

print(df['Flag_AtoB'].value_counts())
print(df['Flag_AtoC'].value_counts())




## A 구간 선정 - Flag_Ato_B 의 A 지점 Rising edge 생성
## B 구간 선정 - Flag_Ato_B 의 B 지점 Falling edge 생성
## C 구간 선정 - Flag_Ato_C 의 C 지점 Falling edge 생성

# flag 변수 생성
df['a_rising']=0
df['b_falling']=0
df['c_falling']=0

# Flag_AtoB의 Rising /Falling edge 사용
diffs_AB=np.convolve(df['Flag_AtoB'],[1,-1])
rising_a=diffs_AB > 0.5
falling_b=diffs_AB < -0.5

######################################## A 지점 ##################################
df['a_rising']=rising_a[:len(df)]
df['a_rising']=np.where(
    df['a_rising'] == True, 1, 0
)
index_a=np.where(df['a_rising']==1)
index_a=index_a[0]
print("a지점 갯수 : " , len(index_a))


######################################## B 지점 ##################################
df['b_falling']=falling_b[:len(df)]
df['b_falling']=np.where(
    df['b_falling'] == True, 1, 0
)
index_b=np.where(df['b_falling']==1)
index_b=index_b[0]
print("b지점 갯수 : " , len(index_b))


######################################## C 지점 ##################################
# Flag_AtoC의 Falling edge 사용
diffs_AC=np.convolve(df['Flag_AtoC'],[1,-1])
rising_c=diffs_AC > 0.5
falling_c=diffs_AC < -0.5

df['c_falling']=falling_c[:len(df)]
df['c_falling']=np.where(
    df['c_falling'] == True, 1, 0
)
index_c=np.where(df['c_falling']==1)
index_c=index_c[0]
print("c지점 갯수 : " , len(index_c))



## c구간이 이상치라고 생각되는 값 찾아서 제거하기
# for idx , points in enumerate(zip (index_a, index_b , index_c)):
#     a_point= points[0]
#     b_point= points[1]
#     c_point = points[2]
#     if c_point < b_point:
#         print(f'idx : {idx}, a_point : {a_point} , b_point : {b_point} , c_point : {c_point}')

## 위에 for 문으로 눈으로 찾은뒤 2개의 이상치를 제거해야함
## for문으로 돌려서 c_point 값이 b_point 보다 커야 되는 데 작은 index 부터 밀려서 나옴
# 7293 , 40849 이상치 제거
remove_set = {7293, 40849}
index_c = [i for i in index_c if i not in remove_set]
print(f'이상치 제거 후 c지점 갯수 : {len(index_c)}')

## 이상치 제거 후 이상없는 지 확인
print("a지점 갯수 : " , len(index_a))
print("b지점 갯수 : " , len(index_b))
print("c지점 갯수 : " , len(index_c))



## 앞에서 생성한 필요없는 columns 삭제
## a_rising / b_falling / c_falling	
df = df.drop(columns=['a_rising', 'b_falling', 'c_falling'])
df




indexing_window = np.zeros_like(df['eng_rpm'])

## X , y 값을 순차대로 배열에 넣음

X_, y_ = [], []

for idx , points in enumerate(zip (index_a, index_b , index_c)):
    a_point= points[0]
    b_point= points[1]
    c_point = points[2]
#     print(f'idx : {idx}, a_point : {a_point} , b_point : {b_point} , c_point : {c_point}')
    
    ## X 배열에 넣음  -- 독립변수
    # 맨마지막 피처 전까지 넣음
    x_temp = df.iloc[a_point:b_point,:-1]
    X_.append(x_temp)

    ## y배열에 넣음
    # 맨마지막 피처만 넣음 , eng_tooth
    y_temp = df.iloc[c_point,-1]
    y_.append(y_temp)
    

print(f"X data : {len(X_)}")
print(f"y data : {len(y_)}")




##################### plot 구간 설정  ################
start_time=20
end_time = 120
measure_rate= 0.01
time_to_index = 1/measure_rate

start_index=int(start_time * time_to_index)
end_index=int(end_time * time_to_index)


############################################################# PLOT ########################################
## eng_rpm index = 5
plt.plot(df.loc[start_time:end_time,'eng_rpm'])
## eng_tooth_index = -1
plt.plot(df.loc[start_time:end_time,'eng_tooth'])

#############################################################################################################
# # point 그림그리기
for idx , points in enumerate(zip (index_a, index_b , index_c)):
    a_point= points[0]
    b_point= points[1]
    c_point = points[2]
    
#     print(f'index a/b/c : {a_point} / {b_point} / {c_point}')
#     print(f'x_value a/b/c : {df.index[a_point]} / {df.index[b_point]} / {df.index[c_point]}')
    
    ## 모든 구간이 다 작은 경우에만 plot 수행
    if (df.index[a_point] < end_time) & (df.index[b_point] < end_time) & (df.index[c_point] < end_time):
        print(f'x_value a/b/c : {df.index[a_point]} / {df.index[b_point]} / {df.index[c_point]}')
    #     a_point 시각화
        plt.text(df.index[a_point],0, 'A', fontsize=7, color='r')
        plt.axvline(x=df.index[a_point], color='r', linestyle='--', linewidth=1)

    #     b_point 시각화
        plt.text(df.index[b_point],0, 'B', fontsize=7, color='b')
        plt.axvline(x=df.index[b_point], color='b', linestyle='--', linewidth=1)   

    #     c_point 시각화
        plt.text(df.index[c_point], 0, 'C', fontsize=7, color='g')
        plt.axvline(x=df.index[c_point], color='g', linestyle='--', linewidth=1) 











